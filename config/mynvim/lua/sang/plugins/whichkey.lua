return {
  "folke/which-key.nvim",
  event = "VeryLazy",

  opts = {
    mode = "n", -- NORMAL mode
    prefix = "<leader>",
    plugins = {
      marks = true,
      registers = true,
      spelling = {
        enabled = true,
        suggestions = 20,
      },
      presets = {
        operators = false,
        motions = false,
        text_objects = false,
        windows = false,
        nav = false,
        z = false,
        g = false,
      },
    },
    win = {
      border = "rounded",
      position = "bottom",
      padding = { 2, 2, 2, 2 },
    },
    show_help = false,
    show_keys = false,
    disable = {
      buftypes = {},
      filetypes = { "TelescopePrompt" },
    },
  },

  keys = {
    { "<leader>;", "<cmd>tabnew | terminal<CR>", desc = "Term" },
    { "<leader>T", group = "Treesitter" },
    { "<leader>a", group = "Tab" },
    { "<leader>aN", "<cmd>tabnew %<cr>", desc = "New Tab" },
    { "<leader>ah", "<cmd>-tabmove<cr>", desc = "Move Left" },
    { "<leader>al", "<cmd>+tabmove<cr>", desc = "Move Right" },
    { "<leader>an", "<cmd>$tabnew<cr>", desc = "New Empty Tab" },
    { "<leader>ao", "<cmd>tabonly<cr>", desc = "Only" },
    { "<leader>b", group = "Buffers" },
    { "<leader>d", group = "Debug" },
    { "<leader>g", group = "Git" },
    { "<leader>gg", "<cmd>lua require 'sang.plugins.toggleterm'.lazygit_toggle()<cr>", desc = "Lazygit" },
    { "<leader>h", "<cmd>nohlsearch<CR>", desc = "NOHL" },
    { "<leader>l", group = "LSP" },
    { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Code Action" },
    { "<leader>lh", "<cmd>lua require('sang.plugins.lspconfig').toggle_inlay_hints()<cr>", desc = "Hints" },
    { "<leader>li", "<cmd>LspInfo<cr>", desc = "Info" },
    {
      "<leader>lj",
      "<cmd>lua vim.diagnostic.goto_next()<cr>",
      desc = "Next Diagnostic",
    },
    {
      "<leader>lk",
      "<cmd>lua vim.diagnostic.goto_prev()<cr>",
      desc = "Prev Diagnostic",
    },
    {
      "<leader>ll",
      "<cmd>lua vim.lsp.codelens.run()<cr>",
      desc = "CodeLens Action",
    },
    { "<leader>lq", "<cmd>lua vim.diagnostic.setloclist()<cr>", desc = "Quickfix" },
    { "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename" },
    { "<leader>p", group = "Plugins" },
    { "<leader>q", "<cmd>lua require 'sang.plugins.bufferline'.buf_kill 'bd'<CR>", desc = "Close buffer" },
    { "<leader>t", group = "Test" },
    { "<leader>v", "<cmd>vsplit<CR>", desc = "Split" },

    { "<leader>bb", "<cmd>Telescope buffers previewer=false<cr>", desc = "Find" },
    {
      "<leader>fb",
      "<cmd>Telescope git_branches<cr>",
      desc = "Checkout branch",
    },
    { "<leader>fc", "<cmd>Telescope colorscheme<cr>", desc = "Colorscheme" },
    { "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Find files" },
    { "<leader>fh", "<cmd>Telescope help_tags<cr>", desc = "Help" },
    { "<leader>fl", "<cmd>Telescope resume<cr>", desc = "Last Search" },
    { "<leader>fp", "<cmd>lua require('telescope').extensions.projects.projects()<cr>", desc = "Projects" },
    { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "Recent File" },
    { "<leader>ft", "<cmd>Telescope live_grep<cr>", desc = "Find Text" },

    { "<leader>/", "<Plug>(comment_toggle_linewise_current)", desc = "Comment" },
    { "<leader>/", "<Plug>(comment_toggle_linewise_visual)", desc = "Comment", mode = "v" },

    { "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", desc = "Reset Buffer" },
    { "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Git Diff" },
    { "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk({navigation_message = false})<cr>", desc = "Next Hunk" },
    { "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk({navigation_message = false})<cr>", desc = "Prev Hunk" },
    { "<leader>gl", "<cmd>lua require 'gitsigns'.blame_line()<cr>", desc = "Blame" },
    { "<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", desc = "Preview Hunk" },
    { "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", desc = "Reset Hunk" },
    { "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", desc = "Stage Hunk" },
    {
      "<leader>gu",
      "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",
      desc = "Undo Stage Hunk",
    },

    -- q = { "<cmd>lua require 'sang.plugins.bufferline'.buf_kill 'bd'<CR>", "Close buffer" },
    -- h = { "<cmd>nohlsearch<CR>", "NOHL" },
    -- [";"] = { "<cmd>tabnew | terminal<CR>", "Term" },
    -- v = { "<cmd>vsplit<CR>", "Split" },
    -- b = { name = "Buffers" },
    -- d = { name = "Debug" },
    -- g = {
    --   name = "Git",
    --   g = { "<cmd>lua require 'sang.plugins.toggleterm'.lazygit_toggle()<cr>", "Lazygit" },
    -- },
    -- p = { name = "Plugins" },
    -- t = { name = "Test" },
    -- a = {
    --   name = "Tab",
    --   n = { "<cmd>$tabnew<cr>", "New Empty Tab" },
    --   N = { "<cmd>tabnew %<cr>", "New Tab" },
    --   o = { "<cmd>tabonly<cr>", "Only" },
    --   h = { "<cmd>-tabmove<cr>", "Move Left" },
    --   l = { "<cmd>+tabmove<cr>", "Move Right" },
    -- },
    -- T = { name = "Treesitter" },
    --
    -- l = {
    --   name = "LSP",
    --   a = { "<cmd>lua vim.lsp.buf.code_action()<cr>", "Code Action" },
    --   i = { "<cmd>LspInfo<cr>", "Info" },
    --   j = { "<cmd>lua vim.diagnostic.goto_next()<cr>", "Next Diagnostic" },
    --   h = { "<cmd>lua require('sang.plugins.lspconfig').toggle_inlay_hints()<cr>", "Hints" },
    --   k = { "<cmd>lua vim.diagnostic.goto_prev()<cr>", "Prev Diagnostic" },
    --   l = { "<cmd>lua vim.lsp.codelens.run()<cr>", "CodeLens Action" },
    --   q = { "<cmd>lua vim.diagnostic.setloclist()<cr>", "Quickfix" },
    --   r = { "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename" },
    -- },
  },
}
